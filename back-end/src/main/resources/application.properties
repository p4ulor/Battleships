#server.port=9000
# Statement: The '${port:9000}' tries to get env variable 'port', if not found, uses port 9000:
# Update: docs say it will allow configuring using --port=9001 (only) in command line? Because it also works as env variable https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.properties-and-configuration.short-command-line-arguments
server.port=${port:9000}

# When the path pattern doesn't match it prints warning -> o.s.web.servlet.PageNotFound  : No mapping for GET / .html
# I dont think this is required anyway
# Indicates the only allowable paths that allow access to static content. The ** is required
# =/staticpath/**, /ae/** will not work, u can only have 1. You can use /** to work when there's no /.../ after the hostname/domain (like default)
#spring.mvc.static-path-pattern=/**
#spring.mvc.static-path-pattern=/staticpath/**
# Acess content like: http://localhost:9000/staticpath/a.html or http://localhost:9000/staticpath/a2.html

# You can also access /js/ay.js. To restrict the accesses, see link bellow
# https://www.baeldung.com/spring-mvc-static-resources

# Setting these locations will override all of these!!! (public/b.html will not work per example) https://spring.io/blog/2013/12/19/serving-static-web-content-with-spring-boot#:~:text=CLASSPATH_RESOURCE_LOCATIONS
# If there are 2 files with the same name on both paths, it will pick the first one on the list. If a file is not found in one, it will go to the next path
#spring.web.resources.static-locations=file:staticdev, classpath:public, classpath:static
spring.web.resources.static-locations=classpath:public
# Acess content like: http://localhost:9000/a.html , http://localhost:9000/js/ay.js
# Having the static content in file:staticdev (a folder at the same level dir level of src) has the advantage of not having to restart the server to apply the changes to the files!!! If you make changes to the files inside resources you will have to re-build/restart the server to see the changes!
#spring.web.resources.static-locations=classpath:/public, /static/**

# Indicates what file types are acceptable to return:
#spring.mvc.view.suffix=.html

# Alternative to using these properties -> https://stackoverflow.com/questions/42393211/how-can-i-serve-static-html-from-spring-boot

# Line bellow tells spring that when there's an error to redirect to a path (see MyErrorController in exceptions.kt) https://www.baeldung.com/spring-boot-custom-error-page
#server.error.path=/ups
server.error.include-message=always
server.error.include-binding-errors=always
# server.error.whitelabel.enabled=false